syntax = "proto3";
package buildsecurity;
option go_package = "/buildsecurity";

service BuildSecurity {
  rpc LookupRepository(LookupRepositoryReq) returns (LookupRepositoryResp);
  rpc CreateRepository(CreateRepositoryReq) returns (CreateRepositoryResp);
  rpc GetPolicies(GetPoliciesReq) returns (GetPoliciesResp);
  rpc CreateScan(CreateScanReq) returns (CreateScanResp);
}

message LookupRepositoryReq {
  string SCMID = 1;
}

message LookupRepositoryResp {
  string RepositoryID = 2;
}

message CreateRepositoryReq {
  string SCMID = 1;
  string Name = 2;
}

message CreateRepositoryResp {
  string RepositoryID = 1;
}

message GetPoliciesReq {
  string RepositoryID = 1;
  string Branch = 2;
}

message GetPoliciesResp {
  repeated Policy Policies = 1;
}

message CreateScanReq {
  string RepositoryID = 1;
  string Branch = 2;
  string User = 3;
  string System = 4;
  string Commit = 5;
  repeated Result Results = 7;
  map<string, string> Tags = 8;
  TriggeredByEnum TriggeredBy = 9;
  string Run = 10;
  string BuildID = 11;
  repeated Pipeline Pipelines = 12;
  map<string, PackageDependencies> PackageDependencies = 13;
}



enum TriggeredByEnum {
    TRIGGERED_BY_UNKNOWN = 0;
    TRIGGERED_BY_PUSH = 1;
    TRIGGERED_BY_PR = 2;
    TRIGGERED_BY_OFFLINE = 3;
    }

message CreateScanResp {
  string ScanID = 1;
}

message Policy {
  string PolicyID = 1;
  bool Enforced = 2;
  repeated PolicyControl Controls = 3;
  PolicyTypeEnum PolicyType = 4;
}

message PolicyControl {
  string Provider = 1;
  string Service = 2;
  repeated string AVDIDs = 3;
  SeverityEnum Severity = 4;
  ScanTypeEnum ScanType = 5;
}

message PolicyResult {
  string PolicyID   = 1;
  bool Enforced   = 2;
  bool Failed     = 3;
  string Reason = 4;
}

message Result {
  string AVDID = 1;
  string Message = 2;
  enum TypeEnum {
    TYPE_UNKNOWN = 0 ;
    TYPE_TERRAFORM = 1;
    TYPE_CLOUDFORMATION = 2;
    TYPE_DOCKERFILE = 3;
    TYPE_KUBERNETES = 4;
    TYPE_YAML = 5;
    TYPE_HCL = 6;
    TYPE_VULNERABILITIES = 7;
    TYPE_SECRETS = 8;
    TYPE_HELM = 9;
    TYPE_PIPELINE = 10;
  }
  TypeEnum Type = 4;
  SeverityEnum Severity = 5;
  string Title = 6;
  string Filename = 7;
  int32 StartLine = 8;
  int32 EndLine = 9;
  string Resource = 10;
  repeated PolicyResult PolicyResults = 11;
  string PkgName = 12;
  string InstalledVersion = 13;
  string FixedVersion = 14;
  string DataSource = 15;
  repeated VendorScoring VendorScoring = 16;
  string suppressionID = 17;
  int64 PublishedDate = 18;
  int64 LastModified = 19;
}

enum SeverityEnum {
  SEVERITY_UNKNOWN = 0;
  SEVERITY_LOW = 1;
  SEVERITY_MEDIUM = 2;
  SEVERITY_HIGH = 3;
  SEVERITY_CRITICAL = 4;
  SEVERITY_MAX = 5;
}

enum PolicyTypeEnum {
  POLICY_TYPE_POLICY = 0;
  POLICY_TYPE_SUPPRESSION = 1;
}

enum ScanTypeEnum {
  SCAN_TYPE_MISCONFIGURATION = 0;
  SCAN_TYPE_VULNERABILITY = 1;
  SCAN_TYPE_SECRET = 2;
  SCAN_TYPE_PIPELINE = 3;
}

message VendorScoring {
string vendorName = 1;
float V2Score = 2;
string V2Vector = 3;
float V3Score = 4;
string V3Vector = 5;
}

message Pipeline {
  string ID = 1;
  string Name = 2;
  string CreatedDate = 4;
  string CreatedBy = 5;
  string Path = 6;
  string Platform = 7;
  string Branch = 8;
  string LastCommitSha = 9;
  string LastCommitDate = 10;
  string UpdatedBy = 11;
  string Link = 12;
}

message PackageDependencies {

 repeated PackageDependency PackageDependencies = 1;
}

message PackageDependency {
  string ID = 1;
  string Target = 2;
  string Type = 3;
  repeated string ChildIDs = 4;

}